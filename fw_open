#!/usr/bin/env bash
#shellcheck disable=SC2206,SC2207,SC1091,SC2034,SC2128

[[ $UID == 0 ]] || { echo "You must be root to run this."; exit 1; }

# Usage examples:
#
#   1. Allow port 80 for a local network of LAN 1 192.168.0.0/24
#     $ . .env
#     $ ./fw-open.sh 80 192.168.0.0/24
#   2. Allow port 22 for just a VPN node with IP 10.1.1.3
#     $ . .env
#     $ ./fw-open.sh 22 10.1.1.3
#   3. Allow port 53 udp for all nodes & public IPs
#     $ ./fw-open.sh 53 udp
#   4. Disallow port 22 for specific node
#     $ ./fw-open.sh 22 10.1.1.5 DROP
#   5. Remove duplicate rules
#     $ ./fw-open.sh --remove-duplicates
#
# IMPORTANT:
# Local clients of each LAN will appear to VPN as their LAN IP. So you can
# enable or disable services in server for use locally only.

if [[ " $* " ==  *" --help "* ]]; then
  grep '^#' "$0" | cut -c3- | tail -n +2
  exit
elif [[ " $* " ==  *" --remove-duplicates "* ]]; then
  echo "Removing duplicate rules"
  iptables_remove_duplicates
  echo "Done"
  exit
fi

. "$(dirname "$BASH_SOURCE")/core.bash"
. "$(dirname "$BASH_SOURCE")/networking.bash"

get_rule() {
  local rule="iptables -A" is_ipv6=false
  [[ $# -eq 0 ]] && return 1

  while [[ $# -gt 0 ]]; do
    if [[ $1 =~ ^[0-9]+$ ]]; then
      local -r dport="$1"
      shift
    elif validate_ipv6 "$1" || validate_ipv6_cidr "$1"; then
      is_ipv6=true
      local -r ip="$1"
      shift
    elif validate_ipv4 "$1" || validate_ipv4_cidr "$1"; then
      local -r ip="$1"
      shift
    elif [[ $1 == "tcp" || $1 == "udp" ]]; then
      local -r proto="$1"
      shift
    elif [[ $1 == "INPUT" || $1 == "OUTPUT" || $1 == "FORWARD" ]]; then
      local -r chain="$1"
      shift
    elif [[ $1 == "ACCEPT" || $1 == "DROP" || $1 == "REJECT" ]]; then
      local -r action="$1"
      shift
    else
      echo "Invalid argument: $1"
      return 1
    fi
  done

  if ${is_ipv6}; then
    rule="ip6tables -A"
  fi

  rule="${rule} ${chain:-INPUT} -p ${proto:-tcp}"

  if [[ -n "${dport:-}" ]]; then
    rule="${rule} --dport $dport"
  fi

  if [[ -n "${ip:-}" ]]; then
    rule="${rule} -s $ip"
  fi

  rule="${rule} -j ${action:-ACCEPT}"

  echo "$rule"
}

rule=$(get_rule "$@")

echo "Applying rule:"
echo " > $rule"
eval "command sudo ${rule}"
